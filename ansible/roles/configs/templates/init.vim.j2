" General settings
set nocompatible
filetype plugin indent on
syntax on

" Set leader key to space
let mapleader = " "

" Enable true colors
if has('termguicolors')
  set termguicolors
endif

" Set colorscheme
set background=dark
colorscheme desert

" Basic editor settings
set number
set relativenumber
set cursorline
set hidden
set noerrorbells
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set nowrap
set smartcase
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set scrolloff=8
set colorcolumn=80
set signcolumn=yes
set cmdheight=2
set updatetime=50
set shortmess+=c

" Enable mouse support
set mouse=a

" Enable system clipboard
set clipboard=unnamedplus

" Key mappings
" Use ; for : in normal and visual mode
nnoremap ; :
vnoremap ; :

" Split navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Resize splits with arrow keys
nnoremap <silent> <Right> :vertical resize +5<CR>
noremap <silent> <Left> :vertical resize -5<CR>
noremap <silent> <Up> :resize +5<CR>
noremap <silent> <Down> :resize -5<CR>

" Move selected line / block of text in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Keep cursor in place when joining lines
nnoremap J mzJ`z

" Center search results
nnoremap n nzzzv
nnoremap N Nzzzv

" Keep cursor in place when appending next line
nnoremap <expr> j v:count ? 'j' : 'gj'
noremap <expr> k v:count ? 'k' : 'gk'

" Yank to end of line
nnoremap Y y$

" Clear search highlights
nnoremap <leader>h :nohlsearch<CR>

" Open netrw file explorer
nnoremap <leader>e :Explore<CR>

" Quick save and quit
nnoremap <leader>w :w<CR>
noremap <leader>q :q<CR>

" Plugin management with vim-plug
call plug#begin('~/.local/share/nvim/plugged')

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'tomasiser/vim-code-dark'

" Status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" File navigation
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

" Git integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Syntax highlighting
Plug 'sheerun/vim-polyglot'

" Autocompletion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Code formatting
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }

" Commenting
Plug 'tpope/vim-commentary'

" Surrounding text
Plug 'tpope/vim-surround'

" Multiple cursors
Plug 'mg979/vim-visual-multi', {'branch': 'master'}

" Auto pairs
Plug 'jiangmiao/auto-pairs'

" Indent guides
Plug 'yggdroot/indentline'

" Start screen
Plug 'mhinz/vim-startify'

" Terminal integration
Plug 'voldikss/vim-floaterm'

call plug#end()

" Plugin configurations

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='onedark'

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>
let NERDTreeShowHidden=1

" fzf
nnoremap <C-p> :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Rg<CR>

" coc.nvim
" Use tab for trigger completion with characters ahead and navigate
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '✹'
let g:gitgutter_sign_removed = '✗'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_modified_removed = 'ww'

" vim-prettier
let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0

" vim-commentary
autocmd FileType c,cpp,go,java,javascript,python,rust setlocal commentstring=//\ %s
autocmd FileType sh,python,ruby,perl setlocal commentstring=#\ %s

" indentLine
let g:indentLine_char = '┆'
let g:indentLine_enabled = 1

" vim-floaterm
let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_prev   = '<F8>'
let g:floaterm_keymap_next   = '<F9>'
let g:floaterm_keymap_toggle = '<F12>'

" File type specific settings
autocmd FileType python setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType javascript,typescript,json,html,css setlocal shiftwidth=2 tabstop=2 expandtab

" Auto commands
" Automatically source vimrc on save
autocmd! BufWritePost $MYVIMRC source $MYVIMRC | echom "Reloaded " . $MYVIMRC | redraw

" Remove trailing whitespace on save
autocmd BufWritePre * %s/\s\+$//e

" Enable spell checking for markdown and text files
autocmd FileType markdown,text setlocal spell

" Set up persistent undo
if !isdirectory(expand("~/.vim/undodir"))
    call mkdir(expand("~/.vim/undodir"), "p")
endif

" Set up backup directories
if !isdirectory(expand("~/.vim/backup"))
    call mkdir(expand("~/.vim/backup"), "p")
endif
set backupdir=~/.vim/backup//

if !isdirectory(expand("~/.vim/swap"))
    call mkdir(expand("~/.vim/swap"), "p")
endif
set directory=~/.vim/swap//

" Set up persistent views
if !isdirectory(expand("~/.vim/view"))
    call mkdir(expand("~/.vim/view"), "p")
endif
set viewdir=~/.vim/view

" Set up colorscheme
if has('termguicolors')
    set termguicolors
endif

" Set colorscheme based on time of day
function! SetColorscheme()
    let hour = strftime("%H")
    if hour >= 17 || hour < 8
        set background=dark
        colorscheme onedark
    else
        set background=light
        colorscheme PaperColor
    endif
endfunction

call SetColorscheme()
