---
- name: Install development packages (Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ development_packages }}"
    state: present
  become: yes
  when: ansible_os_family == "Debian"

- name: Install development packages (RHEL/Rocky/CentOS)
  ansible.builtin.dnf:
    name: "{{ development_packages }}"
    state: present
  become: yes
  when: ansible_os_family == "RedHat"

- name: Install Gradle manually (RHEL/Rocky/CentOS)
  block:
    - name: Download Gradle
      get_url:
        url: "https://github.com/gradle/gradle-distributions/releases/download/v{{ version.gradle }}/gradle-{{ version.gradle }}-bin.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/gradle-{{ version.gradle }}-bin.zip"
        mode: '0644'
        validate_certs: yes
    
    - name: Extract Gradle
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/gradle-{{ version.gradle }}-bin.zip"
        dest: "{{ ansible_env.HOME }}/.local/"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/gradle-{{ version.gradle }}"
    
    - name: Create Gradle symlink
      file:
        src: "{{ ansible_env.HOME }}/.local/gradle-{{ version.gradle }}/bin/gradle"
        dest: "{{ ansible_env.HOME }}/.local/bin/gradle"
        state: link
  when: os_family == "redhat"

- name: Check Vagrant installation
  block:
    - name: Check if Vagrant binary exists
      stat:
        path: "{{ ansible_env.HOME }}/.local/bin/vagrant"
      register: vagrant_binary
      changed_when: false
      
    - name: Get installed Vagrant version
      command: "{{ ansible_env.HOME }}/.local/bin/vagrant --version"
      register: vagrant_version
      changed_when: false
      ignore_errors: true
      
    - name: Set Vagrant installation facts
      set_fact:
        vagrant_needs_install: >-
          {{ not vagrant_binary.stat.exists or 
             version.vagrant not in (vagrant_version.stdout | default('')) }}
      
    - name: Debug Vagrant version check
      debug:
        msg: >-
          Vagrant needs install: {{ vagrant_needs_install }}
          Installed version: {{ vagrant_version.stdout | default('Not installed') }}
          Desired version: {{ version.vagrant }}
      when: install_vagrant 
      register: vagrant_check
      changed_when: false

- name: Install Vagrant
  block:
    - name: Download Vagrant
      get_url:
        url: "https://releases.hashicorp.com/vagrant/{{ version.vagrant }}/vagrant_{{ version.vagrant }}_linux_amd64.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/vagrant-{{ version.vagrant }}.zip"
        mode: '0755'
    
    - name: Unzip Vagrant
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/vagrant-{{ version.vagrant }}.zip"
        dest: "{{ ansible_env.HOME }}/.local/bin/"
        remote_src: yes
        mode: '0755'
        extra_opts: ["-o"]

    - name: Verify Vagrant installation
      command: "{{ ansible_env.HOME }}/.local/bin/vagrant --version"
      register: vagrant_version
      changed_when: false
      ignore_errors: yes

    - name: Display Vagrant version
      debug:
        msg: "Vagrant version: {{ vagrant_version.stdout | default('Vagrant installation may have failed') }}"
      when: install_vagrant

- name: Install Rust via rustup
  block:
    - name: Install Rust
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ version.rust_channel }}
        source {{ ansible_env.HOME }}/.cargo/env
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
    
    - name: Update Rust to the specified channel
      command: rustup update {{ version.rust_channel }}
      environment:
        PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"

- name: Install Go
  block:
    - name: Create Go directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/go"
        state: directory
        mode: '0755'
    
    - name: Download Go
      get_url:
        url: "https://go.dev/dl/go{{ version.go }}.linux-amd64.tar.gz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/go-{{ version.go }}.tar.gz"
        mode: '0644'
    
    - name: Extract Go
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/go-{{ version.go }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin/go"
        remote_src: yes
        extra_opts: [--strip-components=1]
       
    - name: Add Go to PATH in .bashrc if not present
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export PATH="{{ ansible_env.HOME }}/.local/bin/go/bin:$PATH"'
        insertafter: '^# User specific environment'
        create: yes
      when: install_go

- name: Install Anaconda
  block:
    - name: Download Anaconda installer
      get_url:
        url: "https://repo.anaconda.com/archive/Anaconda3-{{ version.anaconda }}-Linux-x86_64.sh"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/anaconda-{{ version.anaconda }}.sh"
        mode: '0755'
    
    - name: Install Anaconda
      shell: "{{ ansible_env.HOME }}/Downloads/installers/anaconda-{{ version.anaconda }}.sh -b -p {{ ansible_env.HOME }}/anaconda3"
      args:
        creates: "{{ ansible_env.HOME }}/.local/bin/anaconda3/bin/conda"
      when: install_anaconda

- name: Install Flutter
  block:
    - name: Create Flutter directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/flutter"
        state: directory
        mode: '0755'
    
    - name: Download Flutter
      get_url:
        url: "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_{{ version.flutter }}-stable.tar.xz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/flutter-{{ version.flutter }}.tar.xz"
        mode: '0644'
      when: not flutter_installed.stat.exists
    
    - name: Extract Flutter
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/flutter-{{ version.flutter }}.tar.xz"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/bin/flutter/bin/flutter"
    
    - name: Add Flutter to PATH
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export PATH="{{ ansible_env.HOME }}/.local/bin/flutter/bin:$PATH"'
        insertafter: '^# User specific environment'
        create: yes
  when: install_flutter and (flutter_check is not defined or flutter_check.flutter_needs_install)

- name: Install Terraform
  block:
    - name: Download Terraform
      get_url:
        url: "https://releases.hashicorp.com/terraform/{{ version.terraform }}/terraform_{{ version.terraform }}_linux_amd64.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/terraform-{{ version.terraform }}.zip"
        mode: '0644'

    - name: Extract Terraform
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/terraform-{{ version.terraform }}.zip"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        mode: '0755'
        creates: "{{ ansible_env.HOME }}/.local/bin/terraform"

    - name: Verify Terraform installation
      command: "{{ ansible_env.HOME }}/.local/bin/terraform --version"
      register: terraform_version
      changed_when: false
      ignore_errors: yes

    - name: Display Terraform version
      debug:
        msg: "{{ terraform_version.stdout | default('Terraform installation may have failed') }}"
  when: install_terraform

- name: Install Jekyll and Hugo
  block:
    - name: Install Jekyll via gem
      gem:
        name: jekyll
        state: present
        user_install: yes
    
    - name: Create .local/bin directory if it doesn't exist
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: '0755'
    
    - name: Download Hugo
      get_url:
        url: "https://github.com/gohugoio/hugo/releases/download/v{{ version.hugo }}/hugo_extended_{{ version.hugo }}_linux-amd64.tar.gz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/hugo-{{ version.hugo }}.tar.gz"
        mode: '0644'
    
    - name: Extract Hugo
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/hugo-{{ version.hugo }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/bin/hugo"
