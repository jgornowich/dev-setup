---
- name: Install development packages (Debian/Ubuntu)
  ansible.builtin.apt:
    name: "{{ development_packages }}"
    state: present
  become: yes
  when: ansible_os_family == "Debian"

- name: Install development packages (RHEL/Rocky/CentOS)
  ansible.builtin.dnf:
    name: "{{ development_packages }}"
    state: present
  become: yes
  when: ansible_os_family == "RedHat"

- name: Install Gradle manually (RHEL/Rocky/CentOS)
  block:
    - name: Download Gradle
      get_url:
        url: "https://github.com/gradle/gradle-distributions/releases/download/v{{ version.gradle }}/gradle-{{ version.gradle }}-bin.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/gradle-{{ version.gradle }}-bin.zip"
        mode: '0644'
        validate_certs: yes
    
    - name: Extract Gradle
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/gradle-{{ version.gradle }}-bin.zip"
        dest: "{{ ansible_env.HOME }}/.local/"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/gradle-{{ version.gradle }}"
    
    - name: Create Gradle symlink
      file:
        src: "{{ ansible_env.HOME }}/.local/gradle-{{ version.gradle }}/bin/gradle"
        dest: "{{ ansible_env.HOME }}/.local/bin/gradle"
        state: link
  when: os_family == "redhat"

- name: Install Vagrant
  block:
    - name: Download Vagrant
      get_url:
        url: "https://releases.hashicorp.com/vagrant/{{ version.vagrant }}/vagrant_{{ version.vagrant }}_linux_amd64.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/vagrant-{{ version.vagrant }}.zip"
        mode: '0755'
    
    - name: Unzip Vagrant
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/vagrant-{{ version.vagrant }}.zip"
        dest: "{{ ansible_env.HOME }}/.local/bin/"
        remote_src: yes
        mode: '0755'
        extra_opts: ["-o"]

    - name: Verify Vagrant installation
      command: "{{ ansible_env.HOME }}/.local/bin/vagrant --version"
      register: vagrant_version
      changed_when: false
      ignore_errors: yes
  when: install_vagrant

- name: Install Rust via rustup
  block:
    - name: Install Rust
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ version.rust_channel }}
        source {{ ansible_env.HOME }}/.cargo/env
      args:
        creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
    
    - name: Update Rust to the specified channel
      command: rustup update {{ version.rust_channel }}
      environment:
        PATH: "{{ ansible_env.HOME }}/.cargo/bin:{{ ansible_env.PATH }}"
  when: install_rust

- name: Install Go
  block:
    - name: Create Go directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/go"
        state: directory
        mode: '0755'
    
    - name: Download Go
      get_url:
        url: "https://go.dev/dl/go{{ version.go }}.linux-amd64.tar.gz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/go-{{ version.go }}.tar.gz"
        mode: '0644'
    
    - name: Extract Go
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/go-{{ version.go }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin/go"
        remote_src: yes
        extra_opts: [--strip-components=1]
  when: install_go

- name: Install Anaconda
  block:
    - name: Download Anaconda installer
      get_url:
        url: "https://repo.anaconda.com/archive/Anaconda3-{{ version.anaconda }}-Linux-x86_64.sh"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/anaconda-{{ version.anaconda }}.sh"
        mode: '0755'
    
    - name: Install Anaconda
      shell: "{{ ansible_env.HOME }}/Downloads/installers/anaconda-{{ version.anaconda }}.sh -b -p {{ ansible_env.HOME }}/anaconda3"
      args:
        creates: "{{ ansible_env.HOME }}/anaconda3/bin/conda"
  when: install_anaconda

- name: Install Flutter
  block:
    - name: Create Flutter directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/flutter"
        state: directory
        mode: '0755'
    
    - name: Download Flutter
      get_url:
        url: "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_{{ version.flutter }}-stable.tar.xz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/flutter-{{ version.flutter }}.tar.xz"
        mode: '0644'
    
    - name: Extract Flutter
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/flutter-{{ version.flutter }}.tar.xz"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/bin/flutter/bin/flutter"
  when: install_flutter

- name: Install Terraform
  block:
    - name: Download Terraform
      get_url:
        url: "https://releases.hashicorp.com/terraform/{{ version.terraform }}/terraform_{{ version.terraform }}_linux_amd64.zip"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/terraform-{{ version.terraform }}.zip"
        mode: '0644'

    - name: Extract Terraform
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/terraform-{{ version.terraform }}.zip"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        mode: '0755'
        creates: "{{ ansible_env.HOME }}/.local/bin/terraform"

    - name: Verify Terraform installation
      command: "{{ ansible_env.HOME }}/.local/bin/terraform --version"
      register: terraform_version
      changed_when: false
      ignore_errors: yes

    - name: Display Terraform version
      debug:
        msg: "{{ terraform_version.stdout | default('Terraform installation may have failed') }}"
  when: install_terraform

- name: Install Jekyll and Hugo
  block:
    - name: Install Jekyll via gem
      gem:
        name: jekyll
        state: present
        user_install: yes
      when: install_jekyll
    
    - name: Create .local/bin directory if it doesn't exist
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: '0755'
    
    - name: Download Hugo
      get_url:
        url: "https://github.com/gohugoio/hugo/releases/download/v{{ version.hugo }}/hugo_extended_{{ version.hugo }}_linux-amd64.tar.gz"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/hugo-{{ version.hugo }}.tar.gz"
        mode: '0644'
      when: install_hugo
    
    - name: Extract Hugo
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/hugo-{{ version.hugo }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/bin/hugo"
      when: install_hugo

- name: Install Postman
  block:
    - name: Create Postman directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/Postman"
        state: directory
        mode: '0755'
    
    - name: Download Postman
      get_url:
        url: "https://dl.pstmn.io/download/version/{{ version.postman }}/linux64"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/postman-{{ version.postman }}.tar.gz"
        mode: '0644'
    
    - name: Extract Postman
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/installers/postman-{{ version.postman }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin/"
        remote_src: yes
        creates: "{{ ansible_env.HOME }}/.local/bin/Postman/Postman"
    
    - name: Create Postman symlink
      file:
        src: "{{ ansible_env.HOME }}/.local/bin/Postman/Postman"
        dest: "{{ ansible_env.HOME }}/.local/bin/postman"
        state: link
  when: install_postman

- name: Install VS Code (Debian/Ubuntu)
  block:
    - name: Add Microsoft GPG key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present
      become: yes
    
    - name: Add VS Code repository
      apt_repository:
        repo: "deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/repos/code stable main"
        state: present
      become: yes
    
    - name: Install VS Code
      apt:
        name: code
        state: present
        update_cache: yes
      become: yes
  when: os_family == "debian" and install_vscode

- name: Install VS Code (RHEL/Rocky/CentOS)
  block:
    - name: Add Microsoft repository
      yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        gpgcheck: yes
        gpgkey: https://packages.microsoft.com/keys/microsoft.asc
        enabled: yes
      become: yes
    
    - name: Install VS Code
      dnf:
        name: code
        state: present
      become: yes
  when: os_family == "redhat" and install_vscode

- name: Install DBeaver
  block:
    - name: Download DBeaver (Debian/Ubuntu)
      get_url:
        url: "https://github.com/dbeaver/dbeaver/releases/download/{{ version.dbeaver }}/dbeaver-ce_{{ version.dbeaver }}_amd64.deb"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/dbeaver-{{ version.dbeaver }}.deb"
        mode: '0644'
      when: ansible_os_family == "Debian"

    - name: Install DBeaver (Debian/Ubuntu)
      apt:
        deb: "{{ ansible_env.HOME }}/Downloads/installers/dbeaver-{{ version.dbeaver }}.deb"
        state: present
      become: yes
      when: ansible_os_family == "Debian"

    - name: Download DBeaver (RHEL/Rocky/CentOS)
      get_url:
        url: "https://github.com/dbeaver/dbeaver/releases/download/{{ version.dbeaver }}/dbeaver-ce-{{ version.dbeaver }}-stable.x86_64.rpm"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/dbeaver-{{ version.dbeaver }}.rpm"
        mode: '0644'
      when: ansible_os_family == "RedHat"

    - name: Install DBeaver (RHEL/Rocky/CentOS)
      dnf:
        name: "{{ ansible_env.HOME }}/Downloads/installers/dbeaver-{{ version.dbeaver }}.rpm"
        state: present
        disable_gpg_check: yes
      become: yes
      when: ansible_os_family == "RedHat"
  when: install_dbeaver

- name: Install Windsurf (if available)
  block:
    - name: Download Windsurf (Debian/Ubuntu)
      get_url:
        url: "https://windsurf-stable.codeiumdata.com/linux-x64/stable/windsurf-linux-x64-1.0.5.deb"
        dest: "{{ ansible_env.HOME }}/Downloads/installers/windsurf.deb"
        mode: '0644'
      when: os_family == "debian"
      ignore_errors: yes
    
    - name: Install Windsurf (Debian/Ubuntu)
      apt:
        deb: "{{ ansible_env.HOME }}/Downloads/installers/windsurf.deb"
        state: present
      become: yes
      when: os_family == "debian"
      ignore_errors: yes
  when: install_windsurf